// Generated by LiveScript 1.3.0
var div, a, i, table, thead, tr, tbody, td, th, span, input, button, pre;
var React = require('React');
var Link = require('react-router').Link;

var Dom = React.DOM;
div = Dom.div, a = Dom.a, i = Dom.i, table = Dom.table, thead = Dom.thead, tr = Dom.tr, tbody = Dom.tbody, td = Dom.td, th = Dom.th, span = Dom.span, input = Dom.input, button = Dom.button, pre = Dom.pre;

var get = function(obj, prop){
  var parts, last;
  parts = prop.split('.');
  last = parts.pop();
  while (prop = parts.shift()) {
    obj = obj[prop];
    if (typeof obj !== 'object' || !obj) {
      return;
    }
  }
  return obj[last];
};
var formatVal = function(val, format){
  if (typeof format === 'function') {
    return format(val);
  }
  switch (format) {
  case 'date':
    return "FIX DATE"
  case 'decimalPercent':
    return val * 100 + "%";
  case val === undefined:
    return "empty";
  default:
    return val;
  }
};
var Grid = React.createClass({
  displayName: "Grid",
  propTypes: {
    data: React.PropTypes.array.isRequired,
    columns: React.PropTypes.array
  },
  getDefaultProps: function(){
    return {
      data: [],
      columns: []
    }
  },
  getInitialState: function(){
    return {
      sortByIndex: null,
      sortDirection: true
    };
  },
  render: function(){
    var data, cols, getRenderer;
    data = this.props.data;
    cols = this.props.columns;
    getRenderer = this.getRenderer;

    if (data.length != 0 && cols.length == 0) {
      cols = Object.keys(data[0]).map(function(val){ return {key: val, display: val.replace("_", " ")}})
    }
    return this.transferPropsTo(table({
      className: "table table-condensed"
    }, thead(null, tr(null, cols.map(this.renderHeader))), tbody(null, data.map(function(row, rowI){
      return tr({
        key: "row-" + rowI
      }, cols.map(function(column, columnI){
        var result;
        result = getRenderer(column, rowI, columnI)({
          rowI: rowI,
          row: row,
          columnI: columnI,
          column: column,
          value: get(row, column.key || "")
        });
        return td({
          key: "cell-" + rowI + "-" + columnI,
          className: (column.tdClassName || " ") + ""
        }, result);
      }));
    }))));
  },
  getRenderer: function(column, rowI, columnI){
    var renderer;
    return renderer = column.renderer || StringRenderer;
  },
  renderHeader: function(obj, index){
    return th({
      key: "col-" + index,
      className: obj.className
    }, obj.display || obj.key);
  }
});
var StringRenderer = React.createClass({
  displayName: "StringRenderer",
  getInitialState: function(){
    return {
      editing: false
    };
  },
  handleChange: function(event){
    ({
      value: event.target.value,
      column: this.props.column,
      row: this.props.row
    });
  },
  render: function(){
    var val;
    val = formatVal(this.props.value, this.props.column.format);
    if (this.state.editing) {
      return div(null, div({
        className: "ui action input small"
      }, input({
        type: "text",
        value: val,
        onChange: this.handleChange
      }), div({
        className: "ui button tiny",
        onClick: this.toggle
      }, "x")));
    } else {
      return div(null, val);
    }
  },
  toggle: function(){
    this.setState({
      editing: !this.state.editing
    });
  }
});
var CrudActions = React.createClass({
  displayName: "CrudActions",
  'delete': function(e){
    e.preventDefault();
    return api[this.props.column.resourceType].del(this.props.row.id);
  },
  render: function(){
    var ref$;
    return div(null, a({
      className: "ui icon basic button tiny",
      onClick: this['delete']
    }, i({
      className: "icon trash red"
    })), typeof (ref$ = this.props.column).customActions == 'function' ? ref$.customActions(this.props) : void 8);
  }
});
var CellLink = React.createClass({
  displayName: "CellLink",
  render: function(){
    var linkTo;
    linkTo = this.props.column.linkTo;
    return div(null, Link({
      to: linkTo,
      params: {
        termId: termId,
        resourceId: this.props.row.id
      }
    }, this.props.value));
  }
});
module.exports = {
  Grid: Grid,
  CrudActions: CrudActions,
  StringRenderer: StringRenderer,
  CellLink: CellLink
};
